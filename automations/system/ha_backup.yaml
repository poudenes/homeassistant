#  ██╗  ██╗ █████╗     ██████╗  █████╗  ██████╗██╗  ██╗██╗   ██╗██████╗
#  ██║  ██║██╔══██╗    ██╔══██╗██╔══██╗██╔════╝██║ ██╔╝██║   ██║██╔══██╗
#  ███████║███████║    ██████╔╝███████║██║     █████╔╝ ██║   ██║██████╔╝
#  ██╔══██║██╔══██║    ██╔══██╗██╔══██║██║     ██╔═██╗ ██║   ██║██╔═══╝
#  ██║  ██║██║  ██║    ██████╔╝██║  ██║╚██████╗██║  ██╗╚██████╔╝██║
#  ╚═╝  ╚═╝╚═╝  ╚═╝    ╚═════╝ ╚═╝  ╚═╝ ╚═════╝╚═╝  ╚═╝ ╚═════╝ ╚═╝
###########################################################################################
# Creator of the automation: https://github.com/paolo-hub/Home-Assistant-Backup-Manager
###########################################################################################
- id: "8403b324-ab44-4a41-b294-495b726e5a41"
  alias: "Home Assistant - Backup system"
  triggers:
    - trigger: state # Trigger full backup manual
      entity_id: input_button.ha_backup_manager_full_execute_manually
      id: "ha_full_backup_manual"

    - trigger: template # Trigger full backup automatic
      value_template: "{{ states('sensor.time') == (states.input_datetime.ha_backup_manager_time.attributes.timestamp | int | timestamp_custom('%H:%M', False)) }}"
      id: "ha_full_backup_automatic"

    - trigger: state # Trigger partial backup manual
      entity_id: input_button.ha_backup_manager_partial_execute_manually
      id: "ha_partial_backup_manual"

    - trigger: template # Trigger partial backup automatic
      value_template: "{{ states('sensor.time') == (states.input_datetime.ha_backup_manager_partial_time.attributes.timestamp | int | timestamp_custom('%H:%M', False)) }}"
      id: "ha_partial_backup_automatic"

    - trigger: state # Trigger delate old backup
      entity_id: input_button.ha_delete_backup_manually
      id: "ha_manual_bk_delete"

  conditions:
    - condition: or
      conditions:
        ###########################################################################################
        # OR - Condition for automatic full backup
        ###########################################################################################
        - condition: and
          conditions:
            - condition: state
              entity_id: input_boolean.ha_backup_manager_auto_full
              state: "on"

            - condition: template
              value_template: >-
                {% set today =
                ['Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Sunday'][now().weekday()]
                %} {% if is_state("input_select.ha_backup_manager_day", "Every day") %}
                true {% elif (is_state("input_select.ha_backup_manager_day", "Mon and
                Fri") and today in ["Monday","Friday"]) %} true {% elif
                is_state("input_select.ha_backup_manager_day", "Saturday") and today in
                ["Saturday"] %} true {% elif
                is_state("input_select.ha_backup_manager_day", "Sunday") and today in
                ["Sunday"] %} true {% elif is_state("input_select.ha_backup_manager_day",
                "Mon - Wed - Fri") and today in ["Monday","Wednesday","Friday"] %}
                true {% else %} false {% endif %}

            - condition: trigger
              id: "ha_full_backup_automatic"

          ###########################################################################################
          # OR - Condition for manual full backup
          ###########################################################################################
        - condition: trigger
          id: "ha_full_backup_manual"

        - condition: and
          conditions:
            - condition: state
              entity_id: input_boolean.ha_backup_manager_auto_partial
              state: "on"

            - condition: template
              value_template: >-
                {% set today =
                ['Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Sunday'][now().weekday()]
                %} {% if is_state("input_select.ha_backup_manager_partial_day", "Every
                day") %} true {% elif
                (is_state("input_select.ha_backup_manager_partial_day", "Mon and Fri") and
                today in ["Monday","Friday"]) %} true {% elif
                is_state("input_select.ha_backup_manager_partial_day", "Saturday") and
                today in ["Saturday"] %} true {% elif
                is_state("input_select.ha_backup_manager_partial_day", "Sunday") and today
                in ["Sunday"] %} true {% elif
                is_state("input_select.ha_backup_manager_partial_day", "Mon - Wed - Fri")
                and today in ["Monday","Wednesday","Friday"] %} true {% else %}
                false {% endif %}

            - condition: trigger
              id: "ha_partial_backup_automatic"

          ###########################################################################################
          # Condition for maial partial backup
          ###########################################################################################
        - condition: trigger
          id: "ha_partial_backup_manual"

          ###########################################################################################
          # Condition for manuale delate old backup
          ###########################################################################################
        - condition: trigger
          id: "ha_manual_bk_delete"

  actions:
    - choose:
        ###########################################################################################
        # Option 1 - Full backup triggered
        ###########################################################################################
        - conditions:
            - condition: trigger
              id:
                - "ha_full_backup_automatic"
                - "ha_full_backup_manual"

          sequence:
            - action: persistent_notification.create # Persistant notification fo succesfull backup
              data:
                message: |
                  Create Backup
                  {{ now().timestamp() | timestamp_custom('%Y-%m-%d') }}
                  at {{states('sensor.time')}}
                title: "Home Assistant Backup"
                notification_id: ha_backup_manager_persistant_notification

            - action: input_text.set_value # Update backup status - Create full
              data:
                value: "Backup started at {{states('sensor.time')}}"
              target:
                entity_id: input_text.ha_backup_manager_status

            - action: hassio.backup_full # Ececute full backup
              data:
                compressed: true
                name: "Backup {{ now().strftime('%Y-%m-%d') }}"

        ###########################################################################################
        # Option 2 - Partial backup triggered
        ###########################################################################################
        - conditions:
            - condition: trigger
              id:
                - "ha_partial_backup_automatic"
                - "ha_partial_backup_manual"

          sequence:
            - action: input_text.set_value # Update backup status - Create partial
              data:
                value: "Partial backup started at {{states('sensor.time')}}"
              target:
                entity_id: input_text.ha_backup_manager_status

            - action: hassio.backup_partial # Execute partial backup
              data:
                name: Backup Partial {{ now().strftime('%Y-%m-%d') }}
                compressed: true
                homeassistant: true
                addons: |
                  {% if is_state('input_boolean.ha_backup_manager_addon', 'on') -%}
                  {{ state_attr('sensor.ha_backup_manager_addon_list','List') }}
                  {%- else -%}
                  {{ [] }}
                  {% endif -%}
                folders: |
                  {{ states('sensor.ha_backup_manager_selected_folders') }}

      ###########################################################################################
      # if a backup is created
      ###########################################################################################
    - if:
        - condition: trigger
          id:
            - "ha_full_backup_automatic"
            - "ha_full_backup_manual"
            - "ha_partial_backup_automatic"
            - "ha_partial_backup_manual"
      then:
        - wait_for_trigger: # Wait for trigger
            - trigger: event
              event_type: state_changed
              event_data:
                entity_id: sensor.ha_backup_manager_last_backup_slug
          timeout:
            minutes: |
              {{ states('input_number.ha_backup_manager_timeout') | int(0) }}
          continue_on_timeout: true

        ###########################################################################################
        # Actions id a backup is created
        ###########################################################################################
        - if: "{{ wait.remaining != 0 }}"
          then:
            - action: input_text.set_value # Set backup status to succesfull
              data_template:
                entity_id: input_text.ha_backup_manager_status
                value: >-
                  Last Backup {{ now().timestamp() | timestamp_custom('%Y-%m-%d')}}
                  at {{states('sensor.time')}}

            - action: persistent_notification.create # Persistant notification fo succesfull backup
              data:
                message: |
                  Backup completed
                  {{ now().timestamp() | timestamp_custom('%Y-%m-%d') }}
                  at {{states('sensor.time')}}
                title: "Home Assistant Backup"
                notification_id: ha_backup_manager_persistant_notification

              ###########################################################################################
              # if automaitc backup delate is selected
              ###########################################################################################
            - if:
                - condition: template
                  value_template: |
                    {{ states('input_boolean.ha_backup_manager_remove_old_backup') == 'on' }}
              then:
                - action: shell_command.ha_backup_manager_remove_old # Execute the shell command delate

          ###########################################################################################
          # Test backup created
          ###########################################################################################
          else:
            - action: input_text.set_value # Set backup status to failed
              data_template:
                entity_id: input_text.ha_backup_manager_status
                value: "Backup Failled!"

            - action: persistent_notification.create # Persistant notification to backp failed
              data:
                message: |
                  Backup creation failed!
                  {{ now().timestamp() | timestamp_custom('%Y-%m-%d') }}
                title: "Home Assistant Backup"
                notification_id: ha_backup_manager_persistant_notification

      ###########################################################################################
      # Actions if manual backup delete is triggered
      ###########################################################################################
    - if:
        - condition: trigger
          id:
            - "ha_manual_bk_delete" # if manual backup delate triggered
      then:
        - action: shell_command.ha_backup_manager_remove_old # Execute the shell command delate
